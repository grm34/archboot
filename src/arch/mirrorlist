#!/bin/bash

#                        GET MIRRORS & TIMEZONE
# ============================================================================
# Here we use <curl> to get user country and timezone from <ipinfo.io> API.
# Country code is used to get corresponding mirrors from <archlinux.org>
# for fastest downloads during installation. To prevent errors we check if
# timezone is in available list, otherwise we prompt user to set it manualy.
# Last function is used to simply set live system clock according to NTP.
# ============================================================================

_mirrorlist() {

    ### Get user country code from ipinfo.io API
    _info "${MSG_GET_MIRRORS}"
    COUNTRY=$(curl -s ipinfo.io/country)
    CHECK_COUNTRY=$(echo "${COUNTRY}" | grep "error")

    ### Update mirrorlist if country code properly detected
    if [[ ! ${CHECK_COUNTRY} && ${COUNTRY} =~ ^[A-Z]{2}$ ]]; then
        _check mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
        _note "${COUNTRY} ${MSG_MIRRORS_TRUE}"

        # Get corresponding mirrors from archlinux.org
        curl -s "https://www.archlinux.org/mirrorlist/?country=${COUNTRY}\
&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' \
> /etc/pacman.d/mirrorlist

        # Sort detected mirrors first
        _check cat /etc/pacman.d/mirrorlist.backup >> /etc/pacman.d/mirrorlist

    ### Defaults mirrors if not detected
    else
        _note "${MSG_MIRRORS_FALSE}"
    fi
}

_timezone() {

    ### Get user timezone from ipinfo.io API
    _info "${MSG_GET_TIMEZONE}"
    TIMEZONE=$(curl -s ipinfo.io/timezone)

    ### Update timezone if properly detected
    if grep -Fxq "${TIMEZONE}" ./timezone; then
        _note "${TIMEZONE} ${MSG_TIMEZONE_TRUE}"

    ### Otherwise ask timezone to user
    else
        until grep -Fxq "${TIMEZONE}" ./timezone; do
            _note "${MSG_TIMEZONE_FALSE}"
            _prompt "${MSG_PROMPT_TIMEZONE}" "${MSG_TIMEZONE_EXAMPLE}"
            read -r TIMEZONE
        done
    fi
    export TIMEZONE
}

### Set system clock
_clock() {
    _info "${MSG_CLOCK}"
    _check timedatectl set-timezone "${TIMEZONE}"

    # Ensure UDP 123 is open
    GET_IP=$(curl -s ipinfo.io/ip)
    CHECK_IP=$(echo "${GET_IP}" | grep "error")
    if [[ ! ${CHECK_IP} ]]; then
        CHECK_UDP123=$(nmap -Pn -sU "${GET_IP}" -p 123 | grep "open")

        # Update clock to NTP
        if [[ ${CHECK_UDP123} ]]; then
            _check timedatectl set-ntp true
            _check ntpd -qg
            _check hwclock --systohc
        fi
    fi
    timedatectl show
    echo "-> ${MSG_DONE}"
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
