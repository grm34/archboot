#!/bin/bash

#                           USER MANAGEMENT
# ============================================================================
# Here we ask all required variables to the user and we store them.
#
#    Required variables:
#
#      LANGUAGE.......: full list is available in the wiki
#      KEYMAP.........: keymap language code for keyboard
#      HOST_NAME......: computer name such as <my-favorite-computer>
#      ROOTPASSWD.....: at least 6 chars long with 1 letter & 1 digit
#      USER_NAME......: such as <bobby_is_not_a_loser>
#      USERPASSWD.....: at least 6 chars long with 1 letter & 1 digit
#      LINUX_FW.......: firmware blobs for use with the Linux kernel
#      KERNEL.........: DEFAULT - HARDENED - LTS - ZEN (optional)
#      DESKTOP........: GNOME - KDE - DEEPIN - XFCE - LXDE - CINNAMON
#                       BUDGIE - ENLIGHTENMENT - MATE - LXQT
#                       AWESOME - i3 - XMONAD (optional)
#      DISPLAY_MAN....: GDM - LIGHTDM - SDDM - LXDM - XDM (optional)
#      GREETER........: GTK PANTHEON WEBKIT LITARVAN (LightDM only)
#      AUR_HELPER.....: YAY - PAMAC-AUR - TRIZEN (optional)
#      POWER..........: add user to all groups (optional)
#
# We enable user rights in <sudoers> and add him to all groups (optional).
# ============================================================================

_get_user_variables() {

    ### Language
    until grep -Fxq "${LANGUAGE}" ./language; do
        _note "${MSG_WIKI_EXAMPLE}"
        _prompt "${MSG_PROMPT_LANGUAGE}" "${MSG_LANGUAGE_EXAMPLE}"
        read -r LANGUAGE
    done
    export LANGUAGE

    ### Keymap
    KEYMAP=$(echo "${LANGUAGE}" | cut -d'_' -f 1)
    export KEYMAP

    ### Hostname
    until [[ ${#HOST_NAME} -ge 3 && \
${HOST_NAME} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]{1,31}$ ]]; do
        _prompt "${MSG_PROMPT_HOSTNAME}" "${MSG_HOSTNAME_EXAMPLE}"
        read -r HOST_NAME
    done
    export HOST_NAME

    ### Root Password
    _root_passwd
    until [[ ${A} == "${C}" ]]; do
        echo -e "${RED}Error:${YELLOW} ${MSG_PASSWD_FALSE}${NC}"
        _root_passwd
    done
    export ROOTPASSWD="${A}"

    ### Username
    until [[ ${#USER_NAME} -ge 2 && ${USER_NAME} =~ \
^[a-z_]([a-z0-9_-]{0,31}|[a-z0-9_-]{0,30}\$)$ ]]; do
        _prompt "${MSG_PROMPT_USERNAME}" "${MSG_USERNAME_EXAMPLE}"
        read -r USER_NAME
    done
    export USER_NAME

    ### User Password
    _user_passwd
    until [[ ${B} == "${D}" ]]; do
        echo -e "${RED}Error:${YELLOW} ${MSG_PASSWD_FALSE}${NC}"
        _user_passwd
    done
    export USERPASSWD="${B}"

    ### Linux Firmware
    _note "${MSG_WARN_FW}"
    _confirm "${MSG_CONFIRM_FW}"

    case ${CONFIRM} in
        y|Y|yes|Yes|YES) export LINUX_FW="True"
    esac

    ### Linux Kernel
    _confirm "${MSG_CONFIRM_KERNEL}"
    case ${CONFIRM} in

        # Custom kernel
        n|N|no|No|NO)

            until [[ ${KERNEL} =~ ^[1-4]$ ]]; do
                _select "DEFAULT" "HARDENED" "LTS" "ZEN"
                read -r KERNEL
            done
            KERNEL_CHOICE=(NONE LINUX LINUX_HARDENED LINUX_LTS LINUX_ZEN)
            export KERNEL=${KERNEL_CHOICE[${KERNEL}]};;

        # Default kernel
        *) export KERNEL="LINUX"
    esac
    export KERNEL_NAME=${KERNEL//_/-}

    ### DE / WM
    _confirm "${MSG_CONFIRM_DESKTOP}"

    case ${CONFIRM} in

        ## Desktop Environment
        y|Y|yes|Yes|YES)

            # Select DE
            until [[ ${DESKTOP} =~ ^[1-9][0]?$ ]]; do
                _select \
"GNOME" "KDE" "MATE" "XFCE" "LXDE" "LXQT" \
"DEEPIN" "BUDGIE" "CINNAMON" "ENLIGHTENMENT"
                read -r DESKTOP
            done
            DESKTOP_CHOICE=\
(NONE GNOME KDE MATE XFCE4 LXDE LXQT DEEPIN BUDGIE CINNAMON ENLIGHTENMENT)
            export DESKTOP=${DESKTOP_CHOICE[${DESKTOP}]}

            # Additonals DE packages
            case ${DESKTOP} in
                GNOME|KDE|MATE|XFCE4|DEEPIN|LXQT)
                    _confirm "${MSG_CONFIRM_DE_EXTRAS} ${DESKTOP,,}?"

                    case ${CONFIRM} in
                        y|Y|yes|Yes|YES)
                            export DE_EXTRAS="${DESKTOP}_EXTRAS"
                    esac
            esac
            ;;

        ## Window Manager
        *) _confirm "${MSG_CONFIRM_DISPLAY}"

            case ${CONFIRM} in
                y|Y|yes|Yes|YES)
                    until [[ ${DESKTOP} =~ ^[1-3]$ ]]; do
                        _select "AWESOME" "I3" "XMONAD"
                        read -r DESKTOP
                    done
                    DESKTOP_CHOICE=(NONE AWESOME I3 XMONAD)
                    export DESKTOP=${DESKTOP_CHOICE[${DESKTOP}]}
            esac
    esac

    ### Display Manager
    if [[ ${DESKTOP} ]]; then
        _confirm "${MSG_CONFIRM_DEFAULT_DISPLAY} ${DESKTOP,,}?"

        case ${CONFIRM} in

            # Custom display manager
            n|N|no|No|NO)
                until [[ ${DISPLAY_MAN} =~ ^[1-5]$ ]]; do
                    _select "GDM" "LIGHTDM" "SDDM" "LXDM" "XDM"
                    read -r DISPLAY_MAN
                done
                DISPLAY_CHOICE=(NONE GDM LIGHTDM SDDM LXDM XDM)
                export DISPLAY_MAN=${DISPLAY_CHOICE[${DISPLAY_MAN}]}
                ;;

            # Default display manager
            *) case ${DESKTOP} in
                    GNOME) export DISPLAY_MAN="GDM";;
                    KDE) export DISPLAY_MAN="SDDM";;
                    DEEPIN|BUDGIE|CINNAMON|MATE)
                        export DISPLAY_MAN="LIGHTDM";;
                    XFCE4|LXDE|LXQT|ENLIGHTENMENT)
                        export DISPLAY_MAN="LXDM";;
                    *) export DISPLAY_MAN="XDM"
                esac
        esac

        ## LightDM Greeter
        if [[ ${DISPLAY_MAN} == "LIGHTDM" ]]; then
            _confirm "${MSG_CONFIRM_LIGHTDM_GREETER}"

            case ${CONFIRM} in

                # Custom Greeter
                n|N|no|No|NO)
                    until [[ ${GREETER} =~ ^[1-4]$ ]]; do
                        _select "GTK" "PANTHEON" "WEBKIT" "LITARVAN"
                        read -r GREETER
                    done
                    GREETER_CHOICE=\
(NONE GTK_GREETER PANTHEON_GREETER WEBKIT_GREETER LITARVAN_GREETER)
                    export GREETER=${GREETER_CHOICE[${GREETER}]}
                    ;;

                # Default Greeter
                *) case ${DESKTOP} in
                        DEEPIN) export GREETER="DEEPIN_GREETER";;
                        *) export GREETER="GTK_GREETER";;
                    esac
            esac
        fi
    fi

    ### AUR Helper
    _confirm "${MSG_CONFIRM_AUR_HELPER}"

    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            until [[ ${AUR_HELPER} =~ ^[1-3]$ ]]; do
                _select "YAY" "PAMAC-AUR" "TRIZEN"
                read -r AUR_HELPER
            done
            AUR_CHOICE=(NONE YAY PAMAC-AUR TRIZEN)
            export AUR_HELPER=${AUR_CHOICE[${AUR_HELPER}]}
    esac

    ### User Rights
    _confirm "${MSG_CONFIRM_GROUP}"

    case ${CONFIRM} in
        y|Y|yes|Yes|YES) export POWER="True"
    esac
}

_root_passwd() {
    unset A

    ### Root Password
    until [[ ${#A} -ge 6 && ${A} == *[a-z]* && ${A} == *[0-9]* ]]; do
        _note "${MSG_PASSWD_NOTE}"
        _prompt "${MSG_PROMPT_ROOT_PASSWD}"
        read -rs A
    done
    echo

    ### Confirm Root Password
    _prompt "${MSG_CONFIRM_ROOT_PASSWD}"
    read -rs C
    echo
}

_user_passwd() {
    unset B

    ### User Password
    until [[ ${#B} -ge 6 && ${B} == *[a-z]* && ${B} == *[0-9]* ]]; do
        _note "${MSG_PASSWD_NOTE}"
        _prompt "${MSG_PROMPT_USER_PASSWD} ${USER_NAME}:"
        read -rs B
    done
    echo

    ### Confirm User Password
    _prompt "${MSG_CONFIRM_USER_PASSWD} ${USER_NAME}:"
    read -rs D
    echo
}

_enable_user_rights() {

    ### Enable user in sudoers
    _info "${MSG_INFO_SUDOERS}"
    printf "\n## %s privilege specification\n%s ALL=(ALL) ALL" \
"${USER_NAME}" "${USER_NAME}" >> /mnt/etc/sudoers
    echo "-> ${MSG_DONE}"

    ### Add user to all groups
    if [[ ${POWER} ]]; then
        _info "${MSG_INFO_ADD_GROUPS}"
        _chroot "yes | pwck"
        _chroot "yes | grpck"
        GROUPLIST=$(cut -d: -f1 /mnt/etc/group)

        for GROUP in ${GROUPLIST}; do
            _chroot "gpasswd -a ${USER_NAME} ${GROUP}"
            echo "-> ${MSG_DONE}"
        done
    fi
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
