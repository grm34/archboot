#!/bin/bash

#                           USER MANAGEMENT
# ============================================================================
# Here we ask all required variables to the user and we store them.
#
#    Required variables:
#
#      LANGUAGE.......: full list is available in the wiki
#      KEYMAP.........: keymap language code for keyboard
#      HOST_NAME......: computer name such as <my-favorite-computer>
#      ROOTPASSWD.....: at least 6 chars long with 1 letter & 1 digit
#      USER_NAME......: such as <bobby_is_not_a_loser>
#      USERPASSWD.....: at least 6 chars long with 1 letter & 1 digit
#      LINUX_FW.......: firmware blobs for use with the Linux kernel
#      KERNEL.........: DEFAULT - HARDENED - LTS - ZEN (optional)
#      DESKTOP........: GNOME - KDE - DEEPIN - XFCE - LXDE - CINNAMON
#                       BUDGIE - ENLIGHTENMENT - MATE - LXQT
#                       AWESOME - i3 - XMONAD (optional)
#      DISPLAY_MAN....: GDM - LIGHTDM - SDDM - LXDM - XDM (optional)
#      GREETER........: GTK PANTHEON WEBKIT LITARVAN (LightDM only)
#      AUR_HELPER.....: YAY - PAMAC-AUR - TRIZEN (optional)
#      POWER..........: add user to all groups (optional)
#
# We enable user rights in <sudoers> and add him to all groups (optional).
# ============================================================================

_get_user_variables() {

    # Language
    until grep -Fxq "${LANGUAGE}" ./language; do
        _note "full list is available in the wiki."
        _prompt "Enter language code:" "(e.g., fr_FR, en_US, de_DE)"
        read -r LANGUAGE
    done
    export LANGUAGE

    # Keymap
    KEYMAP=$(echo "${LANGUAGE}" | cut -d'_' -f 1)
    export KEYMAP

    # Hostname
    until [[ ${#HOST_NAME} -ge 3 \
&& ${HOST_NAME} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]{1,31}$ ]]; do
        _prompt "Enter hostname:" "(e.g., my-favorite-computer)"
        read -r HOST_NAME
    done
    export HOST_NAME

    # Root Password
    until [[ ${#A} -ge 6 && ${A} == *[a-z]* && ${A} == *[0-9]* ]]; do
        _note "should be at least 6 chars long with 1 letter & 1 digit"
        _prompt "Enter root password:"
        read -rs A
    done
    echo

    # Confirm Root Password
    _prompt "Confirm root password:"
    read -rs ROOTPASSWD
    if [[ ${ROOTPASSWD} != "${A}" ]]; then
        _error "passwords does not match!"
    fi
    export ROOTPASSWD
    echo

    # Username
    until [[ ${#USER_NAME} -ge 2 && ${USER_NAME} \
=~ ^[a-z_]([a-z0-9_-]{0,31}|[a-z0-9_-]{0,30}\$)$ ]]; do
        _prompt "Enter username:" "(e.g., johnny)"
        read -r USER_NAME
    done
    export USER_NAME

    # User Password
    until [[ ${#B} -ge 6 && ${B} == *[a-z]* && ${B} == *[0-9]* ]]; do
        _note "should be at least 6 chars long with 1 letter & 1 digit"
        _prompt "Enter password for user ${USER_NAME}:"
        read -rs B
    done
    echo

    # Confirm User Password
    _prompt "Confirm password for user ${USER_NAME}:"
    read -rs USERPASSWD
    if [[ ${USERPASSWD} != "${B}" ]]; then
        _error "passwords does not match!"
    fi
    export USERPASSWD
    echo

    # Network time protocol
    _confirm "Do you wish to use Network Time Protocol?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            export NTPD="True"
            ;;
    esac

    # Linux Firmware
    _note "RECOMMENDED: firmware blobs may be required by your system!"
    _confirm "Do you wish to install Linux Firmware?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            export LINUX_FW="True"
            ;;
    esac

    # Linux Kernel
    _confirm "Do you wish to install default Linux Kernel?"
    case ${CONFIRM} in

        # Custom kernel
        n|N|no|No|NO)
            until [[ ${KERNEL} =~ ^[1-4]$ ]]; do
                _select "DEFAULT" "HARDENED" "LTS" "ZEN"
                read -r KERNEL
            done
            KERNEL_CHOICE=(NONE LINUX LINUX_HARDENED LINUX_LTS LINUX_ZEN)
            export KERNEL=${KERNEL_CHOICE[${KERNEL}]}
            ;;

        # Default kernel
        *)
            export KERNEL="LINUX"
            ;;
    esac
    export KERNEL_NAME=${KERNEL//_/-}

    # Desktop Environment / Window Manager
    _confirm "Do you wish to install a Desktop Environment?"
    case ${CONFIRM} in

        # DE
        y|Y|yes|Yes|YES)

            # Select DE
            until [[ ${DESKTOP} =~ ^[1-9][0]?$ ]]; do
                _select \
"GNOME" "KDE" "MATE" "XFCE" "LXDE" "LXQT" \
"DEEPIN" "BUDGIE" "CINNAMON" "ENLIGHTENMENT"
                read -r DESKTOP
            done
            DESKTOP_CHOICE=\
(NONE GNOME KDE MATE XFCE4 LXDE LXQT DEEPIN BUDGIE CINNAMON ENLIGHTENMENT)
            export DESKTOP=${DESKTOP_CHOICE[${DESKTOP}]}

            # Additonals DE packages
            case ${DESKTOP} in
                GNOME|KDE|MATE|XFCE4|DEEPIN|LXQT)
                    _confirm \
"Do you wish to install ${DESKTOP,,} additionals packages?"
                case ${CONFIRM} in
                    y|Y|yes|Yes|YES)
                        export DE_EXTRAS="${DESKTOP}_EXTRAS"
                        ;;
                esac
                ;;
            esac
            ;;

        # WM
        *)
            _confirm "Do you wish to install a Window Manager?"
            case ${CONFIRM} in
                y|Y|yes|Yes|YES)
                    until [[ ${DESKTOP} =~ ^[1-3]$ ]]; do
                        _select "AWESOME" "I3" "XMONAD"
                        read -r DESKTOP
                    done
                    DESKTOP_CHOICE=(NONE AWESOME I3 XMONAD)
                    export DESKTOP=${DESKTOP_CHOICE[${DESKTOP}]}
                    ;;
            esac
            ;;
    esac

    # Display Manager
    if [[ ${DESKTOP} ]]; then
        _confirm \
"Do you wish to install ${DESKTOP,,} default Display Manager?"
        case ${CONFIRM} in

            # Custom display manager
            n|N|no|No|NO)
                until [[ ${DISPLAY_MAN} =~ ^[1-5]$ ]]; do
                    _select "GDM" "LIGHTDM" "SDDM" "LXDM" "XDM"
                    read -r DISPLAY_MAN
                done
                DISPLAY_CHOICE=(NONE GDM LIGHTDM SDDM LXDM XDM)
                export DISPLAY_MAN=${DISPLAY_CHOICE[${DISPLAY_MAN}]}
                ;;

            # Default display manager
            *)
                case ${DESKTOP} in
                    GNOME) export DISPLAY_MAN="GDM";;
                    KDE) export DISPLAY_MAN="SDDM";;
                    DEEPIN|BUDGIE|CINNAMON|MATE)
                        export DISPLAY_MAN="LIGHTDM";;
                    XFCE4|LXDE|LXQT|ENLIGHTENMENT)
                        export DISPLAY_MAN="LXDM";;
                    *) export DISPLAY_MAN="XDM";;
                esac
                ;;
        esac

        # LightDM Greeter
        if [[ ${DISPLAY_MAN} == "LIGHTDM" ]]; then
            _confirm "Do you wish to install LightDM default greeter?"
            case ${CONFIRM} in

                # Custom LightDM Greeter
                n|N|no|No|NO)
                    until [[ ${GREETER} =~ ^[1-4]$ ]]; do
                        _select "GTK" "PANTHEON" "WEBKIT" "LITARVAN"
                        read -r GREETER
                    done
                    GREETER_CHOICE=\
(NONE GTK_GREETER PANTHEON_GREETER WEBKIT_GREETER LITARVAN_GREETER)
                    export GREETER=${GREETER_CHOICE[${GREETER}]}
                    ;;

                # Default LightDM Greeter
                *)
                    case ${DESKTOP} in
                        DEEPIN) export GREETER="DEEPIN_GREETER";;
                        *) export GREETER="GTK_GREETER";;
                    esac
                    ;;
            esac
        fi
    fi

    # AUR Helper
    _confirm "Do you wish to install an AUR Helper?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            until [[ ${AUR_HELPER} =~ ^[1-3]$ ]]; do
                _select "YAY" "PAMAC-AUR" "TRIZEN"
                read -r AUR_HELPER
            done
            AUR_CHOICE=(NONE YAY PAMAC-AUR TRIZEN)
            export AUR_HELPER=${AUR_CHOICE[${AUR_HELPER}]}
            ;;
    esac

    # User Rights
    _confirm "Do you wish to add user ${USER_NAME} to all groups?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            export POWER="True"
            ;;
    esac
}

_enable_user_rights() {

    # Enable user in sudoers
    _info "Enabling user ${USER_NAME} in sudoers"
    printf "\n## %s privilege specification\n%s ALL=(ALL) ALL" \
"${USER_NAME}" "${USER_NAME}" >> /mnt/etc/sudoers
    echo "done"

    # Add user to all groups
    if [[ ${POWER} ]]; then
        _info "Adding user ${USER_NAME} to all groups"
        _chroot "yes | pwck"
        _chroot "yes | grpck"
        GROUPLIST=$(cut -d: -f1 /mnt/etc/group)
        for GROUP in ${GROUPLIST}; do
            _chroot "gpasswd -a ${USER_NAME} ${GROUP}"
        done
    fi
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
