#!/bin/bash

#                        ARCH LINUX BASE SYSTEM
# ============================================================================
# Here we install Arch Linux base system, linux kernel (optional), firmware
# (optional), base-devel (AUR only) and CPU microcode updates (matching CPU).
# Then we create user account and we allow him to run commands with sudo.
#
# AUR Helpers (optional) <yay> <pamac-aur> <trizen> <pacaur> <pakku> <pikaur>
# Installation of additional packages from a file is available as an option.
# Last function is used to remove unused packages and to clean pacman cache.
#
# All steps are described in the official documentation:
#
#   https://wiki.archlinux.org/index.php/Installation_guide
# ============================================================================

_install_base() {

    ### Install Base System
    _info "${MSG_INSTALL_BASE}"
    PACSTRAP_APPS=("${ARCH}" "${!KERNEL}" "${SUDO}")
    if [[ ${LINUX_FW} ]]; then PACSTRAP_APPS+=("${FW}"); fi
    if [[ ${AUR_HELPER} ]]; then PACSTRAP_APPS+=("${BASE_DEVEL}"); fi
    yes | _check pacstrap /mnt "${PACSTRAP_APPS[@]}"
    echo "-> ${MSG_DONE}"

    ### Set Fstab
    _info "${MSG_SET_FSTAB}"
    genfstab -U -p /mnt >> /mnt/etc/fstab
    cat < /mnt/etc/fstab | grep -v "Static information"

    ### Set Timezone
    _info "${MSG_SET_TIMEZONE} ${TIMEZONE}"
    ln -sfv "/usr/share/zoneinfo/${TIMEZONE}" /mnt/etc/localtime
    echo "-> ${MSG_DONE}"

    ### Set Locale
    _info "${MSG_SET_LOCALE} ${USER_LANG}.UTF-8"
    echo "${USER_LANG}.UTF-8 UTF-8" >> /mnt/etc/locale.gen
    _chroot "locale-gen"
    _chroot "export LANG=${USER_LANG}.UTF-8"
    echo "LANG=${USER_LANG}.UTF-8" > /mnt/etc/locale.conf
    echo "-> ${MSG_DONE}"

    ### Set Vconsole
    _info "${MSG_SET_VCONSOLE} ${KEYMAP^^}"
    echo "KEYMAP=${KEYMAP}" > /mnt/etc/vconsole.conf
    echo "-> ${MSG_DONE}"

    ### Set Hostname
    _info "${MSG_SET_HOSTNAME} ${HOST_NAME}"
    echo "${HOST_NAME}" > /mnt/etc/hostname
    echo "-> ${MSG_DONE}"

    ### Set Root passwd
    _info "${MSG_SET_ROOT}"
    _chroot "echo 'root:${ROOTPASSWD}' | chpasswd"
    echo "-> ${MSG_DONE}"

    ### Install Network
    _info "${MSG_INSTALL_NET}"
    _chroot "pacman --noconfirm --needed -S ${NET_MANAGER} ${NETAPPS}"
    _chroot "systemctl enable NetworkManager"
    echo "-> ${MSG_DONE}"

    ### Install Microcode
    if [[ ${MICROCODE} ]]; then
        _info "${MSG_INSTALL_UCODE} ${MICROCODE/_/ }"
        _chroot "pacman --noconfirm --needed -S ${!MICROCODE}"
        echo "-> ${MSG_DONE}"
    fi

    ### Install LVM support
    if [[ ${SET_LVM} ]]; then
        _info "${MSG_INSTALL_LVM}"
        _chroot "pacman --noconfirm --needed -S ${LVM_SUPPORT}"
        echo "-> ${MSG_DONE}"
    fi

    ### Install NTFS support
    if [[ ${NTFS} ]]; then
        _info "${MSG_INSTALL_NTFS}"
        _chroot "pacman --noconfirm --needed -S ${NTFS_SUPPORT}"
        echo "-> ${MSG_DONE}"
    fi

    ### Add kernel parameters to systemd-boot
    if [[ ${SET_LVM} ]]; then
        _info "${MSG_BOOT_HOOKS}"

        sed -i -e "/^HOOKS=/s/ keyboard//g" /mnt/etc/mkinitcpio.conf
        sed -i -e "/^HOOKS=/s/filesystems/keyboard keymap filesystems/g" \
/mnt/etc/mkinitcpio.conf

        # LUKS kernel parameters
        if [[ ${SET_LUKS} ]]; then
            sed -i -e \
"/^HOOKS=/s/filesystems/encrypt filesystems/g" /mnt/etc/mkinitcpio.conf
        fi

        # LVM kernel parameters
        if [[ ${SET_LVM} ]]; then
            sed -i -e \
"/^HOOKS=/s/filesystems/lvm2 filesystems/g" /mnt/etc/mkinitcpio.conf
        fi

        # Create new initramfs
        arch-chroot /mnt <<EOF mkinitcpio -P
EOF
        echo "-> ${MSG_DONE}"
    fi

    ### Set User
    _info "${MSG_SET_USER} ${USER_NAME}"
    _chroot "useradd -g users -m -s /bin/bash ${USER_NAME}"
    _chroot "echo '${USER_NAME}:${USERPASSWD}' | chpasswd"
    echo "-> ${MSG_DONE}"
}

_install_AUR_helper() {
    _info "${MSG_INSTALL_AUR} (${AUR_HELPER,,})"

    ### Clone and install AUR Helper
    _allow_user_sudoers "_chroot 'cd /home/${USER_NAME} && sudo -u \
${USER_NAME} git clone https://aur.archlinux.org/${AUR_HELPER,,}.git && cd \
${AUR_HELPER,,} && sudo -u ${USER_NAME} makepkg --noconfirm --needed -sic'"

    ### Clean AUR Helper sources
    rm -rf "/mnt/home/${USER_NAME}/${AUR_HELPER,,}"
    echo "-> ${MSG_DONE}"
}

_install_personal_packages() {
    _info "${MSG_INSTALL_ADDONS}"

    if [[ ${AUR_HELPER} ]]; then
        _allow_user_sudoers \
"_chroot '${AUR_HELPER,,} --noconfirm --needed -S - < ${PACKAGES_FILE}'"

    else
        _chroot "pacman --noconfirm --needed -S - < ${PACKAGES_FILE}"
    fi
    echo "-> ${MSG_DONE}"
}

_allow_user_sudoers() {
    sed -i -e \
"s/${USER_NAME} ALL=(ALL) ALL/${USER_NAME} ALL=(ALL) NOPASSWD: ALL/g" \
/mnt/etc/sudoers; ${1}; sed -i -e \
"s/${USER_NAME} ALL=(ALL) NOPASSWD: ALL/${USER_NAME} ALL=(ALL) ALL/g" \
/mnt/etc/sudoers
}

_clean_dependencies() {
    _info "${MSG_CLEAN_CACHE}"

    ### Remove unused dependencies
    UNUSED_DEPENDENCIES=$( _chroot "pacman -Qdtq" )

    if [[ ${UNUSED_DEPENDENCIES} ]]; then
        _chroot "pacman --noconfirm -Rcsn ${UNUSED_DEPENDENCIES}"
    fi

    ### Clean pacman cache
    _chroot "pacman --noconfirm -Sc"
    echo "-> ${MSG_DONE}"
}

# archboot - Arch Linux Installer by grm34 under Apache License 2.0
# ============================================================================
