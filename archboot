#!/bin/bash
set > old_vars.log

APPNAME="archboot"
VERSION="v2.9.9"
BRANCH="dev"
AUTHOR="grm34"
LICENSE="Apache License 2.0"

_archboot_banner() {
    echo -e """
${BLUE}┌─┐┬─┐┌─┐┬ ┬┌┐ ┌─┐┌─┐┌┬┐  ┌─┐┬─┐┌─┐┬ ┬  ┬┌┐┌┌─┐┌┬┐┌─┐┬  ┬  ┌─┐┬─┐
├─┤├┬┘│  ├─┤├┴┐│ ││ │ │   ├─┤├┬┘│  ├─┤  ││││└─┐ │ ├─┤│  │  ├┤ ├┬┘
┴ ┴┴└─└─┘┴ ┴└─┘└─┘└─┘ ┴   ┴ ┴┴└─└─┘┴ ┴  ┴┘└┘└─┘ ┴ ┴ ┴┴─┘┴─┘└─┘┴└─
${RED} Arch Linux Installer ${VERSION} - A script made with love by ${AUTHOR}
${NC}
   Arch Linux is a light and fast distribution whose concept
   is to remain  as simple  as possible. In the same purpose
   this  script  performs  minimalist  installation, it only
   installs the  required  packages  in order  to  give free
   choice  to the  user.  Pretty  simple, it  just  asks for
   language, hostname, username, the drive  to use, required
   partitions size  and  if  you wish  to install  a desktop
   environment. According to the chosen one  and in order to
   get complete support, additional packages may be required
   For more  information, take a look  at the  ${APPNAME} wiki
"""
}

#                      SHARED VARIABLES & FUNCTIONS
# ============================================================================
# Here we define all required variables and functions to manage archboot.
# Variables are pretty simple such as define required urls and shell colors.
# Functions are used to display install steps, notes, errors or to do some
# actions like to cleanup after fatal error, execute cmd in chrooted env,
# select an option, ask some information to the user or to get install logs.
# ============================================================================

### Github urls (current branch and gh-pages)
export URL="https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/${BRANCH}"
export GHPAGES=\
"https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/gh-pages"

### Shell colors
RED="\e[1;31m"; GREEN="\e[1;32m"; YELLOW="\e[1;33m"
BLUE="\e[1;34m"; CYAN="\e[1;36m"; BOLD="\e[1;37m"; NC="\e[0m"

### Default error msg (required when locale not already sourced)
MSG_ERROR="you must reboot to prevent unreconized system changes."
MSG_KEYBOARD="keyboard interrupt!"
MSG_CLEANUP="Cleaning up sources"

### Display some notes
_note() {
    echo -e "${RED}\nNote: ${BLUE}${1}${NC}"
}

### Display install steps
_info() {
    echo -e "${YELLOW}\n==> ${CYAN}${1}...${NC}"; sleep 1
}

### Ask some information
_prompt() {
    LENTH=${*}; COUNT=${#LENTH}
    echo -ne "\n${YELLOW}==> ${GREEN}${1} ${RED}${2}"
    echo -ne "${YELLOW}\n==> "
    for ((CHAR=1; CHAR<=COUNT; CHAR++)); do echo -ne "-"; done
    echo -ne "\n==> ${NC}"
}

### Ask confirmation (Yes/No)
_confirm() {
    unset CONFIRM; COUNT=$((${#1} + 6))
    until [[ ${CONFIRM} =~ ^(y|n|Y|N|yes|no|Yes|No|YES|NO)$ ]]; do
        echo -ne "${YELLOW}\n==> ${GREEN}${1} ${RED}[y/n]${YELLOW}\n==> "
        for ((CHAR=1; CHAR<=COUNT; CHAR++)); do echo -ne "-"; done
        echo -ne "\n==> ${NC}"
        read -r CONFIRM
    done
}

### Select an option
_select() {
    COUNT=0
    echo -ne "${YELLOW}\n==> "
    for ENTRY in "${@}"; do
        echo -ne "${RED}[$((++COUNT))] ${GREEN}${ENTRY} ${NC}"
    done
    LENTH=${*}; NUMBER=$((${#*} * 4))
    COUNT=$((${#LENTH} + NUMBER + 1))
    echo -ne "${YELLOW}\n==> "
    for ((CHAR=1; CHAR<=COUNT; CHAR++)); do echo -ne "-"; done
    echo -ne "\n==> ${NC}"
}

### Download show progress bar only
_wget() {
    wget "${1}" -q --show-progress
}

### Execute action in chrooted environment
_chroot() {
    arch-chroot /mnt /bin/bash <<EOF
    ${1}
EOF
}

### Check and return command status
_check() {
    "${@}"
    local STATUS=$?
    if [[ ${STATUS} -ne 0 ]]; then _error "${@}"; fi
    return "${STATUS}"
}

### Display error, cleanup and kill
_error() {
    echo -e "\n${RED}Error: ${YELLOW}${*}${NC}"
    _note "${MSG_ERROR}"
    sleep 1; _cleanup; _exit_msg; kill -9 $$
}

### Cleanup on keyboard interrupt
trap '_error ${MSG_KEYBOARD}' 1 2 3 6

### Delete sources and umount partitions
_cleanup() {
    _info "${MSG_CLEANUP}"
    SRC=(base bootloader desktop display firmware gpu_driver mirrorlist \
mounting partitioning user desktop_apps display_apps gpu_apps system_apps \
00-keyboard.conf language loader.conf timezone xinitrc xprofile \
background.png Grub2-themes archboot* *_vars.log english french spanish)

    for SOURCE in "${SRC[@]}"; do
        if [[ -f "${SOURCE}" ]]; then rm -rfv "${SOURCE}"; fi
    done

    if mount | grep /mnt; then umount -Rfv /mnt; fi
}

### Reboot with 10s timeout
_reboot() {
    for ((SECOND=10; SECOND>=1; SECOND--)); do
        echo -ne "\r\033[K${GREEN}${MSG_REBOOT} ${SECOND}s...${NC}"
        sleep 1
    done
    reboot; exit 0
}

### Set logfiles
_logs() {
    _info "${MSG_SET_LOGS}"
    DATETIME=$(_check date '+%d-%m-%Y_%Hh%M')
    INSTALL_LOG="${APPNAME}-${VERSION}_${DATETIME}.log"
    INPUTS_LOG="${USER_NAME}_${DATETIME}.log"
    _archboot_banner > "${INSTALL_LOG}"
    _archboot_banner > "${INPUTS_LOG}"
    echo "-> ${MSG_DONE}"
}

### Set system clock
_clock() {
    _info "${MSG_CLOCK}"
    _check timedatectl set-timezone "${TIMEZONE}"
    _check timedatectl set-ntp true
    _check ntpd -qg
    _check hwclock --systohc
    timedatectl show
}

### Say goodbye
_exit_msg() {
    echo -e "\n${GREEN}<<< ${BLUE}${APPNAME}-${VERSION} ${BOLD}by \
${AUTHOR} ${RED}under ${LICENSE} ${GREEN}>>>${NC}"""
}

#             START SCRIPT - IMPORT SOURCES - GET USER VARIABLES
# ============================================================================
# Here we check internet connection before downloading and importing sources.
# Sources are sorted by type: applications <src/apps> & scripts <src/arch>
# Then we can ask for user variables and we store them to run install.
# In case of desktop environment, we import additional sources and we
# scan for 3D GPU controller to properly define appropriate drivers.
# Kernel mode setting support: in this case no GPU Driver will be installed.
# ============================================================================

### Display archboot banner
_archboot_banner

### Prevent running archboot from repository folder
CHECK_GITHUB=(LICENSE README.md STATS.md conf locale src .github .git)

for FILE in "${CHECK_GITHUB[@]}"; do
    if [[ -f ${FILE} || -d ${FILE} ]]; then
        echo -e \
"${RED}Error: ${YELLOW}do not run ${APPNAME} from git repository folder!${NC}"
        rm -rf old_vars.log; _exit_msg; sleep 1; kill -9 $$
    fi
done

### Check Internet Connection
_info "Checking Internet connection"
INTERNET=$(ping -c 1 archlinux.org)

if [[ ${INTERNET} ]]; then
    _note "congratulations, you are connected to Internet!"
else
    _error "you are not connected to Internet!"
fi

### archboot language
until [[ ${USER_LANGUAGE} =~ ^[1-3]$ ]]; do
    _select "ENGLISH" "FRENCH" "SPANISH (pending)"
    read -r USER_LANGUAGE
done
LANGUAGE_CHOICE=(NONE ENGLISH FRENCH SPANISH)
ARCHBOOT_LANGUAGE=${LANGUAGE_CHOICE[${USER_LANGUAGE}]}
wget -q "${URL}/locale/${ARCHBOOT_LANGUAGE,,}"
_check source "./${ARCHBOOT_LANGUAGE,,}"

### Download base sources
_confirm "${MSG_CONFIRM_DL_SOURCES}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _info "${MSG_DL_SRC_BASE}"
        _wget "${URL}/src/arch/base"           # to install base system
        _wget "${URL}/src/arch/bootloader"     # to install bootloader
        _wget "${URL}/src/arch/firmware"       # to get firmware
        _wget "${URL}/src/arch/mirrorlist"     # to get mirrorlist & timezone
        _wget "${URL}/src/arch/mounting"       # to mount partitions & swap
        _wget "${URL}/src/arch/partitioning"   # to define/create partitions
        _wget "${URL}/src/arch/user"           # to get user variables
        _wget "${URL}/src/apps/system_apps"    # to get system apps
        _wget "${URL}/conf/language"           # to get language code
        _wget "${URL}/conf/timezone"           # to get timezone code
        ;;
    *)
        _cleanup; _exit_msg; exit 0
        ;;
esac

### Import base sources
_info "${MSG_IMPORT_SRC_BASE}"

BASE_SOURCES=\
(base bootloader firmware mirrorlist mounting partitioning user system_apps)

for SOURCE in "${BASE_SOURCES[@]}"; do
    _check source "./${SOURCE}"
done
echo "-> ${MSG_DONE}"

### Get required variables
_get_user_variables

### Desktop Environment
if [[ ${DESKTOP} ]]; then

    # Download desktop sources
    _info "${MSG_DL_SRC_DE}"
    _wget "${URL}/src/arch/desktop"        # to install Desktop Environment
    _wget "${URL}/src/arch/display"        # to install Display Manager
    _wget "${URL}/src/arch/gpu_driver"     # to scan/install GPU Driver
    _wget "${URL}/src/apps/desktop_apps"   # to get Desktop apps
    _wget "${URL}/src/apps/display_apps"   # to get Display Manager apps
    _wget "${URL}/src/apps/gpu_apps"       # to get GPU Driver apps
    _wget "${URL}/conf/00-keyboard.conf"   # to set keyboard layout

    # Import desktop sources
    _info "${MSG_IMPORT_SRC_DE}"
    DE_SOURCES=(desktop display gpu_driver desktop_apps display_apps gpu_apps)

    for SOURCE in "${DE_SOURCES[@]}"; do
        _check source "./${SOURCE}"
    done
    echo "-> ${MSG_DONE}"

    # GPU Driver or kernel mode setting?
    _note "${MSG_MODSETTING}"
    _confirm "${MSG_CONFIRM_GPU}"

    case ${CONFIRM} in
        y|Y|yes|Yes|YES) _get_gpu_driver;;
    esac
fi

#               PREPARE THE SYSTEM - FORMAT - MOUNT PARTITIONS
# ============================================================================
# Here we detect firmware, processor and ntfs partition(s) to properly
# define partitions settings, cpu microcode updates and ntfs support.
# Then we get fastest mirrors, user timezone and we properly define them.
# Now we can configure live system NTP and create installation logfiles.
# Finally we run partitioning, we activate SWAP and we mount the partitions.
# ============================================================================

### Prepare the system
_firmware; _cpu; _ntfs; _mirrorlist; _timezone; _clock; _logs

### Partitioning
_note "${MSG_CUSTOM_PART_NOTE}"
_confirm "${MSG_CONFIRM_DRIVE}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES) _default_partitioning_scheme;;
    *) _custom_partitioning_scheme;;
esac

### Mount
_mount_partitions
_note "${MSG_MOUNT}"
sleep 1

### Display user entries
USER_ENTRIES=(LANGUAGE TIMEZONE HOST_NAME USER_NAME LINUX_FW KERNEL \
DESKTOP DISPLAY_MAN GREETER AUR_HELPER POWER GPU_DRIVER HARD_VIDEO)
_info "${MSG_USER_ENTRIES}"

for ENTRY in "${USER_ENTRIES[@]}"; do
    if [[ ${!ENTRY} ]]; then
        echo -e "${BOLD}* ${ENTRY}: ${NC}${!ENTRY}"
    fi
done

#                         ARCH LINUX INSTALLATION
# ============================================================================
# At this point system is ready, partitions are created, properly mounted
# and user variables stored so we can start Arch Linux installation.
# First step is to install base system and second to install bootloader.
# In case of desktop environment or window manager, we install GPU Drivers
# and Display Manager. Then we install an AUR Helper (optional).
# We use <tee> to get full installation logs of all those steps.
# If system won't start DE/WM after reboot, check the logs and open an issue.
# Take a look at /var/log/archboot for the full installation logs.
# ============================================================================

_confirm "${MSG_CONFIRM_ARCH}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES)

        ### Install Arch Linux base system
        (_install_base; _install_bootloader) 2>&1 | tee -a "${INSTALL_LOG}"

        ### Install GPU Driver
        if [[ ${GPU_DRIVER} ]]; then
            (_install_gpu_driver) 2>&1 | tee -a "${INSTALL_LOG}"
        fi

        ### Install DE / WM / DM
        if [[ ${DESKTOP} ]]; then
            (_install_desktop_environment; _configure_desktop_environment; \
_install_display_manager; _enable_user_rights) 2>&1 | tee -a "${INSTALL_LOG}"
        fi

        ### Install AUR Helper
        if [[ ${AUR_HELPER} ]]; then
            (_install_AUR_helper) 2>&1 | tee -a "${INSTALL_LOG}"
        fi

        ### Clean cache and remove unused dependencies
        (_clean_dependencies) 2>&1 | tee -a "${INSTALL_LOG}"

        ### Get user inputs logs
        _info "${MSG_INPUTS_LOGS}"
        set | grep -v "MSG_\|A=\|B=\|C=\|D=\|ROOTPASSWD=\|USERPASSWD=\|\
RED=\|GREEN=\|YELLOW=\|BLUE=\|CYAN=\|NC=" > new_vars.log
        diff old_vars.log new_vars.log | grep "^>" >> "${INPUTS_LOG}"
        sed -i -e "s/> _='Adding user inputs to logs'//g" "${INPUTS_LOG}"
        echo "-> ${MSG_DONE}"

        ### Move logs to system
        _info "${MSG_MOVE_LOGS}"
        mkdir -v /mnt/var/log/"${APPNAME}"
        mv -v "${INSTALL_LOG}" "/mnt/var/log/${APPNAME}/"
        mv -v "${INPUTS_LOG}" "/mnt/var/log/${APPNAME}/"

        ### Success notes
        _note "${MSG_ARCH_SUCCESS}"
        ;;
    *)
        ### Install aborted
        _error "${MSG_ARCH_ABORTED}"
        ;;
esac

#               CLEANUP SOURCES - UMOUNT PARTITIONS - REBOOT
# ============================================================================
# And here we go! We can now cleanup sources, umount all partitions and
# reboot the computer to restart on our fresh Arch Linux installation.
# Telegram chat: t.me/archboot - Have fun, take care and give a star!
# ============================================================================

_confirm "${MSG_CONFIRM_REBOOT}"

case ${CONFIRM} in
    y|Y|yes|Yes|YES) _cleanup; _exit_msg; _reboot;;
    *) _cleanup; _exit_msg; exit 0;;
esac

# archboot by grm34 under Apache License 2.0
# ============================================================================
